{"ast":null,"code":"var _jsxFileName = \"/home/gamze/Development/code/phase-5/SaleSight-project/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, createContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null); // Initial value null\n\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  //user state variable to be provided to the entire app.\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [error, setError] = useState(null); // Error state\n\n  // Check session on mount\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        const response = await fetch(\"/check_session\");\n        if (response.ok) {\n          const user = await response.json();\n          setCurrentUser(user);\n          setIsAuthenticated(true);\n          setError(\"\"); // Clear any previous error\n        }\n      } catch (err) {\n        setError(err);\n        console.error(err);\n        setIsAuthenticated(false);\n      }\n    };\n    checkSession();\n  }, []);\n  console.log(error);\n\n  // Function to log in the user\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(\"/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (response.ok) {\n        //waits for Promise to resolve.\n        console.log(response);\n        const data = await response.json();\n        setCurrentUser(data);\n        setIsAuthenticated(true);\n        navigate(\"/analytics\");\n        setError(\"\"); // Clear any previous error\n      } else {\n        const errorData = await response.json();\n        console.log(errorData);\n        setError(errorData.message || \"Failed to log in. Please check your credentials.\");\n      }\n    } catch (err) {\n      setError(\"Login request failed\");\n      console.error(err);\n    }\n  };\n  console.log(isAuthenticated); // sets true after login.\n  console.log(currentUser);\n\n  // /signup \n  const signup = async (username, password, name, email) => {\n    try {\n      const response = await fetch(\"/signup\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          name,\n          email\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCurrentUser(data);\n        setIsAuthenticated(true);\n        // navigate to products page or another.\n        navigate(\"/analytics\");\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Failed to sign up\");\n      }\n    } catch (err) {\n      setError(\"Signup request failed\");\n      console.error(err);\n      setIsAuthenticated(false);\n    }\n  };\n  const logOut = async () => {\n    try {\n      await fetch(\"/logout\", {\n        method: \"DELETE\"\n      });\n      setCurrentUser(null);\n      setIsAuthenticated(false); // Reset authentication state\n      navigate(\"/login\"); // Navigate to login page after logout\n    } catch (err) {\n      setError(\"Failed to log out\");\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      setCurrentUser,\n      isAuthenticated,\n      // Provide isAuthenticated state\n      setIsAuthenticated,\n      setError,\n      // Provide error state\n      login,\n      signup,\n      logOut,\n      error // Provide error state\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"dH2nCJJ8hO30tg1CV3l/dGHVLQM=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","error","setError","checkSession","response","fetch","ok","user","json","err","console","log","login","username","password","method","headers","body","JSON","stringify","data","navigate","errorData","message","signup","name","email","logOut","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/gamze/Development/code/phase-5/SaleSight-project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { useState, useEffect, createContext  } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport const AuthContext = createContext(null); // Initial value null\n\n\nexport const AuthProvider = ({ children }) => {\n    //user state variable to be provided to the entire app.\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const [error, setError] = useState(null); // Error state\n \n\n  // Check session on mount\n  useEffect(() => {\n    const checkSession = async () => {\n      try {\n        const response = await fetch(\"/check_session\");\n        if (response.ok) {\n          const user = await response.json();\n          setCurrentUser(user);\n          setIsAuthenticated(true);\n          setError(\"\"); // Clear any previous error\n        }\n      } catch (err) {\n        setError(err);\n        console.error(err);\n        setIsAuthenticated(false)\n      }\n    };\n\n    checkSession();\n  }, []);\n\n  console.log(error)\n\n  // Function to log in the user\n  const login = async (username, password) => {\n    try {\n      const response = await fetch(\"/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username, password }),\n      });\n      if (response.ok) {\n        //waits for Promise to resolve.\n        console.log(response)\n        const data = await response.json();\n        setCurrentUser(data);\n        setIsAuthenticated(true);\n        navigate(\"/analytics\");\n        setError(\"\"); // Clear any previous error\n      } else {\n        const errorData = await response.json();\n        console.log(errorData)\n        setError(\n          errorData.message ||\n            \"Failed to log in. Please check your credentials.\"\n        );\n      }\n    } catch (err) {\n      setError(\"Login request failed\");\n      console.error(err);\n    }\n  };\n\n  console.log(isAuthenticated) // sets true after login.\n  console.log(currentUser)\n\n  // /signup \n  const signup = async (username, password, name, email) => {\n    try {\n      const response = await fetch(\"/signup\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ username, password, name, email }),\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCurrentUser(data);\n        setIsAuthenticated(true);\n        // navigate to products page or another.\n        navigate(\"/analytics\");\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || \"Failed to sign up\");\n      }\n    } catch (err) {\n      setError(\"Signup request failed\");\n      console.error(err);\n      setIsAuthenticated(false)\n    }\n  };\n\n  const logOut = async () => {\n    try {\n      await fetch(\"/logout\", {\n        method: \"DELETE\",\n      });\n      setCurrentUser(null);\n      setIsAuthenticated(false); // Reset authentication state\n      navigate(\"/login\"); // Navigate to login page after logout\n    } catch (err) {\n      setError(\"Failed to log out\");\n      console.error(err);\n    }\n  };\n\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n        setCurrentUser,\n        isAuthenticated, // Provide isAuthenticated state\n        setIsAuthenticated,\n        setError, // Provide error state\n        login,\n        signup,\n        logOut,\n        error, // Provide error state\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}